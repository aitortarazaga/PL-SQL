/*EJERCICIO 6*/
SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE ver_trabajador
IS 
    CURSOR C_TRABAJADOR IS
    SELECT APELLIDO1, FECHANAC
    FROM TRABAJADORES
    ORDER BY APELLIDO1; --No puede ir en el BEGIN porque devuelve más de una fila, por eso abrimos un CURSOR
  REG_TRABAJADOR C_TRBAJADOR %ROWTYPE;
BEGIN
  OPEN C_TRABAJADOR;
  LOOP 
    FETCH C_TRABAJADOR INTO REG_TRABAJADOR;
    DBMS_OUTPUT.PUT_LINE('Apellido: ' || REG_TRABAJADOR.APELLIDO1);
    DBMS_OUTPUT.PUT_LINE('Fecha nac:' ||TO_CHAR( REG_TRABAJADOR.FECHANAC));
    EXIT WHEN C_TRABAJADOR %NOTFOUND;
  END LOOP;
  CLOSE C_TRABAJADOR;
END;

--CON WHILE
CREATE OR REPLACE PROCEDURE T1
IS
    CURSOR C1 IS
        SELECT APELLIDO1, NVL(TO_CHAR(FECHANAC), 'INEXISTENTE') AS FECHANAC
        FROM TRABAJADORES
        ORDER BY APELLIDO1;
VREG C1%ROWTYPE;
BEGIN
  OPEN C1;
  FETCH C1 INTO VREG;
  IF C1%NOTFOUND THEN
      DBMS_OUTPUT.PUT_LINE('TABLA DE TRABAJADORES VACÍA');
  ELSE
      WHILE C1%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE('EL APELLIDO ES; ' || VREG.APELLIDO1||' y su fecha de nacimiento es ' || VREG.FECHANAC);
        FETCH C1 INTO VREG;
      END LOOP;
  END IF;
END;

--CON FOR
CREATE OR REPLACE PROCEDURE T1_FOR
IS
    CURSOR C1 IS
        SELECT APELLIDO1, NVL(TO_CHAR(FECHANAC), 'INEXISTENTE') AS FECHANAC
        FROM TRABAJADORES
        ORDER BY APELLIDO1;
BEGIN
    FOR REG IN C1
      LOOP
        DBMS_OUTPUT.PUT_LINE('EL APELLIDO ES; ' || REG.APELLIDO1||' y su fecha de nacimiento es ' || REG.FECHANAC);
      END LOOP;
END;
EXECUTE T1_FOR;


